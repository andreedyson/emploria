generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SystemRole {
  SUPER_ADMIN
  SUPER_ADMIN_COMPANY
  USER
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id          String     @id @default(cuid())
  name        String
  email       String     @unique
  password    String?
  phone       String?
  address     String?
  gender      Gender?
  dateOfBirth DateTime?
  role        SystemRole @default(USER)
  image       String?
  isActive    Boolean    @default(true)
  companyId   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  company   Company?  @relation(fields: [companyId], references: [id])
  Employee  Employee?
}

model Company {
  id       String  @id @default(cuid())
  name     String
  image    String?
  isActive Boolean @default(true)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  users      User[]
  Employee   Employee[]
  Department Department[]
}

model Employee {
  id           String         @id @default(cuid())
  userId       String         @unique
  companyId    String
  departmentId String?
  position     String
  status       EmployeeStatus @default(ACTIVE)
  joinDate     DateTime       @default(now())

  user       User         @relation(fields: [userId], references: [id])
  company    Company      @relation(fields: [companyId], references: [id])
  Department Department?  @relation(fields: [departmentId], references: [id])
  Salary     Salary[]
  Attendance Attendance[]
  Leave      Leave[]
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
}

model Department {
  id        String @id @default(cuid())
  name      String
  companyId String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  company   Company    @relation(fields: [companyId], references: [id])
  employees Employee[]
}

model Salary {
  id              String   @id @default(cuid())
  employeeId      String
  month           String
  year            String
  baseSalary      Float
  bonus           Float
  deduction       Float
  attendanceBonus Float
  total           Float
  date            DateTime @default(now())

  employee Employee @relation(fields: [employeeId], references: [id])
}

model Attendance {
  id         String           @id @default(cuid())
  employeeId String
  date       DateTime         @default(now())
  checkIn    DateTime?
  checkOut   DateTime?
  status     AttendanceStatus

  employee Employee @relation(fields: [employeeId], references: [id])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
}

model Leave {
  id          String      @id @default(cuid())
  employeeId  String
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      LeaveStatus
  requestDate DateTime    @default(now())

  employee Employee @relation(fields: [employeeId], references: [id])
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}
