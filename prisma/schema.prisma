generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SystemRole {
  SUPER_ADMIN
  SUPER_ADMIN_COMPANY
  USER
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id          String     @id @default(cuid())
  name        String
  email       String     @unique
  password    String?
  phone       String?
  address     String?
  gender      Gender?
  dateOfBirth DateTime?
  role        SystemRole @default(USER)
  image       String?
  isActive    Boolean    @default(true)
  companyId   String?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  company   Company?   @relation(fields: [companyId], references: [id])
  employee  Employee?
  activity  Activity[]
}

model Company {
  id       String  @id @default(cuid())
  name     String
  image    String?
  isActive Boolean @default(true)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  users      User[]
  employee   Employee[]
  department Department[]
  activity   Activity[]
}

model Employee {
  id           String       @id @default(cuid())
  userId       String       @unique
  companyId    String
  departmentId String?
  position     String
  isActive     Boolean      @default(true)
  joinDate     DateTime     @default(now())
  role         EmployeeRole

  user       User         @relation(fields: [userId], references: [id])
  company    Company      @relation(fields: [companyId], references: [id])
  department Department?  @relation(fields: [departmentId], references: [id])
  salary     Salary[]
  attendance Attendance[]
  leave      Leave[]
}

enum EmployeeRole {
  STAFF
  MANAGER
}

model Department {
  id        String @id @default(cuid())
  name      String
  companyId String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  company   Company    @relation(fields: [companyId], references: [id])
  employees Employee[]
}

model Salary {
  id              String       @id @default(cuid())
  employeeId      String
  month           String
  year            String
  baseSalary      Float
  bonus           Float
  deduction       Float
  attendanceBonus Float
  total           Float
  date            DateTime     @default(now())
  status          SalaryStatus @default(UNPAID)
  paidAt          DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
}

enum SalaryStatus {
  PAID
  UNPAID
}

model Attendance {
  id         String           @id @default(cuid())
  employeeId String
  date       DateTime         @default(now())
  checkIn    DateTime?
  checkOut   DateTime?
  status     AttendanceStatus

  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, date])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
}

model Leave {
  id          String      @id @default(cuid())
  employeeId  String
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      LeaveStatus
  requestDate DateTime    @default(now())

  employee Employee @relation(fields: [employeeId], references: [id])
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Activity {
  id        String  @id @default(cuid())
  userId    String?
  companyId String?

  action      ActivityAction
  targetType  ActivityTarget
  targetId    String?
  description String
  metadata    Json?
  timestamp   DateTime       @default(now())

  user    User?    @relation(fields: [userId], references: [id])
  company Company? @relation(fields: [companyId], references: [id])
}

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
  ACTIVATE
  DEACTIVATE
  LOGIN
  LOGOUT
  RESET_PASSWORD
  ASSIGN
  UNASSIGN
  APPROVE
  REJECT
  GENERATE_REPORT
  EXPORT
}

enum ActivityTarget {
  USER
  COMPANY
  EMPLOYEE
  SALARY
  LEAVE
  ATTENDANCE
  DEPARTMENT
  ROLE
  SYSTEM
}
